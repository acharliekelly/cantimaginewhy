// will be generated by some kind of back-end at some point


export const ImageProcessTypes = {
  Unknown: 0,
  View: 1,
  Progress: 2,
  Final: 3,
  Sale: 4
}

const progressImagesMap = {
  "caterpillar_hill": {
    view: 1,
    progress: 4,
    final: 1
  },
  "charles_river": {
    view: 0,
    progress: 0,
    final: 1
  },
  "capitol": {
    view: 2,
    progress: 2,
    final: 1
  },
  "cambridge_hyatt": {
    view: 2,
    progress: 5,
    final: 1
  },
  "cronins_landing": {
    view: 1,
    progress: 0,
    final: 1
  },
  "buildings_n_stuff": {
    view: 0,
    progress: 4,
    final: 1
  },
  "bpg_hancock": {
    view: 3,
    progress: 6,
    final: 1,
    sale: 1
  },
  "eliot_bridge": {
    view: 0,
    progress: 0,
    final: 1
  },
  "fall_mt_feake": {
    view: 2,
    progress: 3,
    final: 1
  },
  "fall_colors": {
    view: 1,
    progress: 2,
    final: 1
  },
  "first_parish": {
    view: 2,
    progress: 2,
    final: 1
  },
  "fall_footbridge": {
    view: 1,
    progress: 4,
    final: 1
  },
  "autumn_woods": {
    view: 1,
    progress: 1,
    final: 1
  },
  "riparian_balcony": {
    view: 1,
    progress: 1,
    final: 1
  },
  "swan_pond": {
    view: 1,
    progress: 5,
    final: 1
  },
  "september_esplanade": {
    view: 2,
    progress: 6,
    final: 1
  },
  "waltham_waterfall": {
    view: 3,
    progress: 8,
    final: 1
  },
  "seven_hills_park": {
    view: 0,
    progress: 0,
    final: 1
	},
  "norumbega_tower": {
    view: 1,
    progress: 2,
    final: 1
	},
  "memorial_drive": {
    view: 2,
    progress: 4,
    final: 1
	},
  "gosport_harbor": {
    view: 3,
    progress: 3,
    final: 1
	},
  "portsmouth": {
    view: 0,
    progress: 0,
    final: 1
	},
  "hatch_shell_east": {
    view: 0,
    progress: 0,
    final: 1
	},
  "herter_birch": {
    view: 2,
    progress: 3,
    final: 1
	},
  "watertown_dam": {
    view: 2,
    progress: 3,
    final: 1
	},
  "tea_crabapple": {
    view: 1,
    progress: 2,
    final: 1
	},
  "beaver_brook": {
    view: 1,
    progress: 2,
    final: 1
	},
  "cambridge_common": {
    view: 0,
    progress: 0,
    final: 1
	},
  "parker_point": {
    view: 0,
    progress: 9,
    final: 1
	},
  "jfk_park": {
    view: 0,
    progress: 0,
    final: 1
	},
  "mit_sunset": {
    view: 0,
    progress: 0,
    final: 1
	},
  "footbridge": {
    view: 1,
    progress: 3,
    final: 1
	},
  "herter": {
    view: 0,
    progress: 0,
    final: 1
	},
  "public_garden_2": {
    view: 1,
    progress: 3,
    final: 1
	},
  "dunster": {
    view: 1,
    progress: 1,
    final: 1
	},
  "longfellow_night": {
    view: 0,
    progress: 0,
    final: 1
	},
  "skyline": {
    view: 0,
    progress: 0,
    final: 1
	},

}

/**
 * Return total image count
 * @param {*} refKey 
 */
export const getTotalOnsiteImageCount = refKey => {
  const obj = progressImagesMap[refKey];
  let result = 0;
  if (obj) {
    if (obj['view']) result += obj.view;
    if (obj['progress']) result += obj.progress;
    if (obj['final']) result += obj.final;
    if (obj['sale']) result += obj.sale;
  }
  return result;
}

const onsiteFinalStr = refKey => `photos/onsite-${refKey}-final`;

/**
 * Returns CPID for corresponding Final Process image
 * @param {*} refKey 
 */
export const onsiteFinalImage = refKey => {
  const proc = progressImagesMap[refKey];
  if (proc && proc.final) {
    const cpid = onsiteFinalStr(refKey);
    console.log('found 1 Final image: ' + cpid)
    return cpid;
  } else {
    return null;
  }
}

const onsiteViewStr = refKey => {
  return `photos/onsite-${refKey}-view`;
}

// return Public ID string of first View image
export const onsiteViewDefaultImage = refKey => {
  const proc = progressImagesMap[refKey];
  if (proc && proc.view > 0) {
    console.log(`found ${proc.view} View images`)
    let view = 'view';
    if (proc.view > 1) {
      view = 'view1';
    }
    return `photos/onsite-${refKey}-${view}`;

  } else {
    return null;
  }
}

// return array of View images (0 or more)
export const onsiteViewImages = refKey => {
  const proc = progressImagesMap[refKey];
  const views = [];
  if (proc) {
    const str = onsiteViewStr(refKey);
    if (proc.view === 1) {
      // if 1 view: 'photos/onsite-ref_key-view'
      views[0] = str;
    } else if (proc.view > 1) {
      // if multiple views: 'photos/onsite-ref_key-view1' ...
      for (let j = 1; j < proc.view; j++) {
        views[j-1] = str + j;
      }
    }
    // if 0 views, return empty array
  }
  return views;
}

const onsiteProgressStr = (refKey, num) => `photos/onsite-${refKey}-${num}`;

/**
 * Returns array of Cloudinary Public ID strings
 * 
 * @param {string} refKey - reference key
 */
export const onsiteProgressImages = refKey => {
  const proc = progressImagesMap[refKey];
  const imgs = [];
  if (proc && proc.progress) {
    
    for (let j = 1; j < proc.progress; j++) {
      imgs[j-1] = onsiteProgressStr(refKey, j);
    }
  }
  return imgs;
}

/**
 * Return object containing all onsite images for 'refkey'
 * return object: {
 *  ref: 'refkey',
 *  view: ['photos/onsite-refkey-view'],
 *  progress: ['photos/onsite-refkey-1', 'photos/onsite-refkey-2'],
 *  final: 'photos/onsite-refkey-final'
 * }
 * @param {str} refKey
 */
export const onsiteImages = refKey => {
  return {
    ref: refKey,
    view: onsiteViewImages(refKey),
    progress: onsiteProgressImages(refKey),
    final: onsiteFinalImage(refKey)
  };

}

/**
 * Return number of process images available for RefKey, by type
 * @param {str} refKey 
 * @param {int} type 
 */
export const getOnsiteCount = (refKey, type = ImageProcessTypes.Unknown) => {
  const ref = progressImagesMap[refKey];
  let imgCount = 0;
  if (ref) {
    switch (type) {
      case ImageProcessTypes.View:
        imgCount = ref.view;
        break;
      case ImageProcessTypes.Progress:
        imgCount = ref.progress;
        break;
      case ImageProcessTypes.Sale:
        imgCount = ref.sale;
        break;
      case ImageProcessTypes.Final:
        imgCount = ref.final;
        break;
      default:
        // if type == 0, return sum of all types
        imgCount = getTotalOnsiteImageCount(refKey);
    }
  } else {
    // refkey not found in map object -> no process images
  }
  return imgCount;
}

export const getOnsiteMaxIndex = (refKey, type = ImageProcessTypes.Final) => {
  return getOnsiteCount(refKey, type) - 1;
}


/**
 * Returns image of type, using sequence if specified or first
 * @param {str} refKey 
 * @param {number} imageSequence 
 * @param {number} type 
 */
export const getOnsiteImage = (refKey, type = ImageProcessTypes.Final, imageSequence = 0) => {
  let cpid = '';
  let imgCount = 0;
  const refObj = progressImagesMap[refKey];
  if (refObj) {
    // key found
    imgCount = getOnsiteCount(refKey, type);
    switch (type) {
      case ImageProcessTypes.View:
        if (imgCount) { // 1 or more View images
          if (imageSequence) { // view # requested
            if (imageSequence <= imgCount) { // valid
              cpid = onsiteViewStr(refKey) + imageSequence;
            }
          }
          // any other View situation, assuming at least one view Image: return default
          cpid = onsiteViewDefaultImage(refKey);
        }
        break;
      case ImageProcessTypes.Progress:
        if (imgCount) { // 1 or more Progress images
          if (imageSequence) { // specific sequence requested
            if (imageSequence <= imgCount) { // valid
              cpid = onsiteProgressStr(refKey, imageSequence);
            } 
          }
          cpid = onsiteProgressImages(refKey)[0];
        }
        break;
      case ImageProcessTypes.Sale:
        cpid = `photos/onsite-${refKey}-sale`;
        break;
      case ImageProcessTypes.Final:
        cpid = onsiteFinalStr(refKey);
        break;
      default:
        // default is Unknown type, return empty string

    }
  } else {
    // refKey not found, no process images
  }
  return cpid;
  
  
}
